name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  lint:
    strategy:
      fail-fast: false
      matrix:
        lint-command:
          - "bandit -r hijack -x hijack/tests"
          - "black --check --diff ."
          - "flake8 ."
          - "isort --check-only --diff ."
          - "pydocstyle ."
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - uses: actions/checkout@v2.4.0
        with:
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      - run: python -m pip install -r requirements.txt
      - run: ${{ matrix.lint-command }}

  dist:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt install -y gettext
      - uses: actions/setup-python@v2.3.1
      - uses: actions/setup-node@v2.5.1
        with:
          node-version: 'lts/*'
      - uses: actions/checkout@v2.4.0
      - name: Install Python dependencies
        run: python -m pip install --upgrade pip setuptools wheel twine readme-renderer
      - run: python setup.py sdist bdist_wheel
      - run: python -m twine check dist/*
      - uses: actions/upload-artifact@v2
        with:
          path: dist/*

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - uses: actions/checkout@v2.4.0
        with:
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      - run: python -m pip install --upgrade pip setuptools wheel
      - run: python -m pip install -r requirements.txt
      - run: python setup.py develop
      - run: python setup.py build_sphinx -W

  SQLite:
    needs: [lint, dist, docs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip setuptools wheel
      - uses: actions/checkout@v2.4.0
      - run: python setup.py test
      - name: Codecov
        run: |
          python -m pip install codecov
          codecov

  extras:
    needs: [lint, dist, docs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        extras:
          - wagtail
        python-version: ["3.10"]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip setuptools wheel
      - uses: actions/checkout@v2.4.0
      - run: python -m pip install -e ".[${{ matrix.extras }}]"
      - run: python setup.py test
      - name: Codecov
        run: |
          python -m pip install codecov
          codecov


  PostgreSQL:
    needs: [lint, dist, docs]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
        django-version:
          - "2.2a1"
          - "3.2a1"
          - "4.0a1"
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: django
          POSTGRES_PASSWORD: django
        ports:
          - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.3.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade pip setuptools wheel
      - uses: actions/checkout@v2.4.0
      - run: python -m pip install "psycopg2-binary<2.9" Django~=${{ matrix.django-version }}
      - run: python setup.py test
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          DB: pg
      - name: Codecov
        run: |
          python -m pip install codecov
          codecov
